{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","defaultLayoutPluginInstance","defaultLayoutPlugin","useState","pdfFile","setPdfFile","pdfFileError","setPdfFileError","viewPdf","setViewPdf","fileType","className","onSubmit","e","preventDefault","type","class","id","required","onChange","selectedFile","target","files","includes","reader","FileReader","readAsDataURL","onloadend","result","console","log","workerUrl","fileUrl","plugins","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVA2GeA,EAjGI,WAGjB,IAAMC,EAA8BC,gCAHb,EAMOC,mBAAS,MANhB,mBAMhBC,EANgB,KAMPC,EANO,OAOiBF,mBAAS,IAP1B,mBAOhBG,EAPgB,KAOFC,EAPE,OAUOJ,mBAAS,MAVhB,mBAUhBK,EAVgB,KAUPC,EAVO,KAajBC,EAAW,CAAC,mBAkClB,OACE,sBAAKC,UAAU,YAAf,UACE,uBACA,oBAAIA,UAAU,cAAd,iCACA,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,iBAAf,SAEE,uBAAMA,UAAU,aAAaC,SAjBT,SAACC,GAC3BA,EAAEC,iBAEAL,EADc,OAAZL,EACSA,EAGA,OAWP,UACE,qBAAKO,UAAU,aAAf,SACE,uBAAOI,KAAK,OAAOC,MAAM,qBAAqBC,GAAG,0BACjDC,UAAQ,EAACC,SA1CO,SAACN,GAC3B,IAAIO,EAAeP,EAAEQ,OAAOC,MAAM,GAClC,GAAIF,EACF,GAAIA,GAAgBV,EAASa,SAASH,EAAaL,MAAO,CACxD,IAAIS,EAAS,IAAIC,WACjBD,EAAOE,cAAcN,GACrBI,EAAOG,UAAY,SAACd,GAClBR,EAAWQ,EAAEQ,OAAOO,QACpBrB,EAAgB,UAIlBF,EAAW,MACXE,EAAgB,4CAIlBsB,QAAQC,IAAI,yBA4BLxB,GAAgB,qBAAKK,UAAU,YAAf,SAA4BL,IAC7C,uBACA,wBAAQS,KAAK,SAASJ,UAAU,sBAAhC,mCAYN,uBAEA,sBAAKA,UAAU,gBAAf,UAGGH,GACC,mCACE,cAAC,SAAD,CAAQuB,UAAU,+DAAlB,SACE,cAAC,SAAD,CAAQC,QAASxB,EACfyB,QAAS,CAAChC,UAOhBO,GAAW,yFCxFN0B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c442a87a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// Librerias\nimport { Viewer } from '@react-pdf-viewer/core';\nimport { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';\nimport { Worker } from '@react-pdf-viewer/core';\n\n// estilos del PDF-VIEWER\nimport '@react-pdf-viewer/core/lib/styles/index.css';\nimport '@react-pdf-viewer/default-layout/lib/styles/index.css';\n\nexport const App = () => {\n\n  // Creando una instancia\n  const defaultLayoutPluginInstance = defaultLayoutPlugin();\n\n  // formulario onchange evento\n  const [pdfFile, setPdfFile] = useState(null);\n  const [pdfFileError, setPdfFileError] = useState('');\n\n  // formulario submit evento\n  const [viewPdf, setViewPdf] = useState(null);\n\n  // onchange evento --> En esta parte del código admitirá archivos PDF\n  const fileType = ['application/pdf'];\n\n  const handlePdfFileChange = (e) => {\n    let selectedFile = e.target.files[0];\n    if (selectedFile) {\n      if (selectedFile && fileType.includes(selectedFile.type)) {\n        let reader = new FileReader();\n        reader.readAsDataURL(selectedFile);\n        reader.onloadend = (e) => {\n          setPdfFile(e.target.result);\n          setPdfFileError('');\n        }\n      }\n      else {\n        setPdfFile(null);\n        setPdfFileError('Seleccione un archivo pdf válido');\n      }\n    }\n    else {\n      console.log('select your file');\n    }\n  }\n\n  // formulario submit\n  const handlePdfFileSubmit = (e) => {\n    e.preventDefault();\n    if (pdfFile !== null) {\n      setViewPdf(pdfFile);\n    }\n    else {\n      setViewPdf(null);\n    }\n  }\n  \n  return (\n    <div className='container'>\n      <br></br>\n      <h5 className=\"text-center\">VISUALIZADOR DE PDF</h5>\n      <div className=\"row\">\n        <div className=\"col-6 col-md-4\">\n          {/*Formulario */}\n          <form className='form-group' onSubmit={handlePdfFileSubmit}>\n            <div className=\"form-group\">\n              <input type=\"file\" class=\"form-control-file \" id=\"exampleFormControlFile1\"\n              required onChange={handlePdfFileChange}\n              />\n            </div>\n            {pdfFileError && <div className='error-msg'>{pdfFileError}</div>}\n            <br></br>\n            <button type=\"submit\" className='btn btn-info btn-md'>\n              Visualizar PDF\n            </button>\n          </form>\n          {/*Finr -> Formulario */}\n\n        </div>\n      </div>\n\n\n\n\n      <br></br>\n\n      <div className='pdf-container'>\n        {/* Mostrar el PDF si lo ha subido */}\n\n        {viewPdf &&\n          <>\n            <Worker workerUrl=\"https://unpkg.com/pdfjs-dist@2.6.347/build/pdf.worker.min.js\">\n              <Viewer fileUrl={viewPdf}\n                plugins={[defaultLayoutPluginInstance]} />\n            </Worker>\n          </>\n        }\n\n        {/* Si no esta subido el archivo PDF el estado es nulo */}\n\n        {!viewPdf && <> No se seleccionó ningún archivo pdf</>}\n      </div>\n\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}